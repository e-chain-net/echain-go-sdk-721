// Package bcostars comment
// This file was generated by tars2go 1.1.10
// Generated from TransactionMetaData.tars
package bcostars

import (
	"fmt"

	"github.com/TarsCloud/TarsGo/tars/protocol/codec"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = fmt.Errorf
var _ = codec.FromInt8

// TransactionMetaData struct implement
type TransactionMetaData struct {
	Hash      []int8 `json:"hash"`
	To        string `json:"to"`
	Source    string `json:"source"`
	Attribute uint32 `json:"attribute"`
}

func (st *TransactionMetaData) ResetDefault() {
}

// ReadFrom reads  from readBuf and put into struct.
func (st *TransactionMetaData) ReadFrom(readBuf *codec.Reader) error {
	var (
		err    error
		length int32
		have   bool
		ty     byte
	)
	st.ResetDefault()

	have, ty, err = readBuf.SkipToNoCheck(1, false)
	if err != nil {
		return err
	}

	if have {
		if ty == codec.LIST {
			err = readBuf.ReadInt32(&length, 0, true)
			if err != nil {
				return err
			}

			st.Hash = make([]int8, length)
			for i0, e0 := int32(0), length; i0 < e0; i0++ {

				err = readBuf.ReadInt8(&st.Hash[i0], 0, false)
				if err != nil {
					return err
				}

			}
		} else if ty == codec.SimpleList {

			_, err = readBuf.SkipTo(codec.BYTE, 0, true)
			if err != nil {
				return err
			}

			err = readBuf.ReadInt32(&length, 0, true)
			if err != nil {
				return err
			}

			err = readBuf.ReadSliceInt8(&st.Hash, length, true)
			if err != nil {
				return err
			}

		} else {
			err = fmt.Errorf("require vector, but not")
			if err != nil {
				return err
			}

		}
	}

	err = readBuf.ReadString(&st.To, 2, false)
	if err != nil {
		return err
	}

	err = readBuf.ReadString(&st.Source, 3, false)
	if err != nil {
		return err
	}

	err = readBuf.ReadUint32(&st.Attribute, 4, false)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

// ReadBlock reads struct from the given tag , require or optional.
func (st *TransactionMetaData) ReadBlock(readBuf *codec.Reader, tag byte, require bool) error {
	var (
		err  error
		have bool
	)
	st.ResetDefault()

	have, err = readBuf.SkipTo(codec.StructBegin, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require TransactionMetaData, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(readBuf)
	if err != nil {
		return err
	}

	err = readBuf.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

// WriteTo encode struct to buffer
func (st *TransactionMetaData) WriteTo(buf *codec.Buffer) (err error) {

	err = buf.WriteHead(codec.SimpleList, 1)
	if err != nil {
		return err
	}

	err = buf.WriteHead(codec.BYTE, 0)
	if err != nil {
		return err
	}

	err = buf.WriteInt32(int32(len(st.Hash)), 0)
	if err != nil {
		return err
	}

	err = buf.WriteSliceInt8(st.Hash)
	if err != nil {
		return err
	}

	err = buf.WriteString(st.To, 2)
	if err != nil {
		return err
	}

	err = buf.WriteString(st.Source, 3)
	if err != nil {
		return err
	}

	err = buf.WriteUint32(st.Attribute, 4)
	if err != nil {
		return err
	}

	return err
}

// WriteBlock encode struct
func (st *TransactionMetaData) WriteBlock(buf *codec.Buffer, tag byte) error {
	var err error
	err = buf.WriteHead(codec.StructBegin, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(buf)
	if err != nil {
		return err
	}

	err = buf.WriteHead(codec.StructEnd, 0)
	if err != nil {
		return err
	}
	return nil
}
