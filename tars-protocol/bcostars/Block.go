// Package bcostars comment
// This file was generated by tars2go 1.1.10
// Generated from Block.tars
package bcostars

import (
	"fmt"

	"github.com/TarsCloud/TarsGo/tars/protocol/codec"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = fmt.Errorf
var _ = codec.FromInt8

// ParentInfo struct implement
type ParentInfo struct {
	BlockNumber int64  `json:"blockNumber"`
	BlockHash   []int8 `json:"blockHash"`
}

func (st *ParentInfo) ResetDefault() {
}

// ReadFrom reads  from readBuf and put into struct.
func (st *ParentInfo) ReadFrom(readBuf *codec.Reader) error {
	var (
		err    error
		length int32
		have   bool
		ty     byte
	)
	st.ResetDefault()

	err = readBuf.ReadInt64(&st.BlockNumber, 1, true)
	if err != nil {
		return err
	}

	_, ty, err = readBuf.SkipToNoCheck(2, true)
	if err != nil {
		return err
	}

	if ty == codec.LIST {
		err = readBuf.ReadInt32(&length, 0, true)
		if err != nil {
			return err
		}

		st.BlockHash = make([]int8, length)
		for i0, e0 := int32(0), length; i0 < e0; i0++ {

			err = readBuf.ReadInt8(&st.BlockHash[i0], 0, false)
			if err != nil {
				return err
			}

		}
	} else if ty == codec.SimpleList {

		_, err = readBuf.SkipTo(codec.BYTE, 0, true)
		if err != nil {
			return err
		}

		err = readBuf.ReadInt32(&length, 0, true)
		if err != nil {
			return err
		}

		err = readBuf.ReadSliceInt8(&st.BlockHash, length, true)
		if err != nil {
			return err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return err
		}

	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

// ReadBlock reads struct from the given tag , require or optional.
func (st *ParentInfo) ReadBlock(readBuf *codec.Reader, tag byte, require bool) error {
	var (
		err  error
		have bool
	)
	st.ResetDefault()

	have, err = readBuf.SkipTo(codec.StructBegin, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require ParentInfo, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(readBuf)
	if err != nil {
		return err
	}

	err = readBuf.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

// WriteTo encode struct to buffer
func (st *ParentInfo) WriteTo(buf *codec.Buffer) (err error) {

	err = buf.WriteInt64(st.BlockNumber, 1)
	if err != nil {
		return err
	}

	err = buf.WriteHead(codec.SimpleList, 2)
	if err != nil {
		return err
	}

	err = buf.WriteHead(codec.BYTE, 0)
	if err != nil {
		return err
	}

	err = buf.WriteInt32(int32(len(st.BlockHash)), 0)
	if err != nil {
		return err
	}

	err = buf.WriteSliceInt8(st.BlockHash)
	if err != nil {
		return err
	}

	return err
}

// WriteBlock encode struct
func (st *ParentInfo) WriteBlock(buf *codec.Buffer, tag byte) error {
	var err error
	err = buf.WriteHead(codec.StructBegin, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(buf)
	if err != nil {
		return err
	}

	err = buf.WriteHead(codec.StructEnd, 0)
	if err != nil {
		return err
	}
	return nil
}

// Signature struct implement
type Signature struct {
	SealerIndex int64  `json:"sealerIndex"`
	Signature   []int8 `json:"signature"`
}

func (st *Signature) ResetDefault() {
}

// ReadFrom reads  from readBuf and put into struct.
func (st *Signature) ReadFrom(readBuf *codec.Reader) error {
	var (
		err    error
		length int32
		have   bool
		ty     byte
	)
	st.ResetDefault()

	err = readBuf.ReadInt64(&st.SealerIndex, 1, true)
	if err != nil {
		return err
	}

	_, ty, err = readBuf.SkipToNoCheck(2, true)
	if err != nil {
		return err
	}

	if ty == codec.LIST {
		err = readBuf.ReadInt32(&length, 0, true)
		if err != nil {
			return err
		}

		st.Signature = make([]int8, length)
		for i0, e0 := int32(0), length; i0 < e0; i0++ {

			err = readBuf.ReadInt8(&st.Signature[i0], 0, false)
			if err != nil {
				return err
			}

		}
	} else if ty == codec.SimpleList {

		_, err = readBuf.SkipTo(codec.BYTE, 0, true)
		if err != nil {
			return err
		}

		err = readBuf.ReadInt32(&length, 0, true)
		if err != nil {
			return err
		}

		err = readBuf.ReadSliceInt8(&st.Signature, length, true)
		if err != nil {
			return err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return err
		}

	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

// ReadBlock reads struct from the given tag , require or optional.
func (st *Signature) ReadBlock(readBuf *codec.Reader, tag byte, require bool) error {
	var (
		err  error
		have bool
	)
	st.ResetDefault()

	have, err = readBuf.SkipTo(codec.StructBegin, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require Signature, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(readBuf)
	if err != nil {
		return err
	}

	err = readBuf.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

// WriteTo encode struct to buffer
func (st *Signature) WriteTo(buf *codec.Buffer) (err error) {

	err = buf.WriteInt64(st.SealerIndex, 1)
	if err != nil {
		return err
	}

	err = buf.WriteHead(codec.SimpleList, 2)
	if err != nil {
		return err
	}

	err = buf.WriteHead(codec.BYTE, 0)
	if err != nil {
		return err
	}

	err = buf.WriteInt32(int32(len(st.Signature)), 0)
	if err != nil {
		return err
	}

	err = buf.WriteSliceInt8(st.Signature)
	if err != nil {
		return err
	}

	return err
}

// WriteBlock encode struct
func (st *Signature) WriteBlock(buf *codec.Buffer, tag byte) error {
	var err error
	err = buf.WriteHead(codec.StructBegin, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(buf)
	if err != nil {
		return err
	}

	err = buf.WriteHead(codec.StructEnd, 0)
	if err != nil {
		return err
	}
	return nil
}

// BlockHeaderData struct implement
type BlockHeaderData struct {
	Version          int32        `json:"version"`
	ParentInfo       []ParentInfo `json:"parentInfo"`
	TxsRoot          []int8       `json:"txsRoot"`
	ReceiptRoot      []int8       `json:"receiptRoot"`
	StateRoot        []int8       `json:"stateRoot"`
	BlockNumber      int64        `json:"blockNumber"`
	GasUsed          string       `json:"gasUsed"`
	Timestamp        int64        `json:"timestamp"`
	Sealer           int64        `json:"sealer"`
	SealerList       [][]int8     `json:"sealerList"`
	ExtraData        []int8       `json:"extraData"`
	ConsensusWeights []int64      `json:"consensusWeights"`
}

func (st *BlockHeaderData) ResetDefault() {
}

// ReadFrom reads  from readBuf and put into struct.
func (st *BlockHeaderData) ReadFrom(readBuf *codec.Reader) error {
	var (
		err    error
		length int32
		have   bool
		ty     byte
	)
	st.ResetDefault()

	err = readBuf.ReadInt32(&st.Version, 2, true)
	if err != nil {
		return err
	}

	_, ty, err = readBuf.SkipToNoCheck(3, true)
	if err != nil {
		return err
	}

	if ty == codec.LIST {
		err = readBuf.ReadInt32(&length, 0, true)
		if err != nil {
			return err
		}

		st.ParentInfo = make([]ParentInfo, length)
		for i0, e0 := int32(0), length; i0 < e0; i0++ {

			err = st.ParentInfo[i0].ReadBlock(readBuf, 0, false)
			if err != nil {
				return err
			}

		}
	} else if ty == codec.SimpleList {
		err = fmt.Errorf("not support SimpleList type")
		if err != nil {
			return err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return err
		}

	}

	_, ty, err = readBuf.SkipToNoCheck(4, true)
	if err != nil {
		return err
	}

	if ty == codec.LIST {
		err = readBuf.ReadInt32(&length, 0, true)
		if err != nil {
			return err
		}

		st.TxsRoot = make([]int8, length)
		for i1, e1 := int32(0), length; i1 < e1; i1++ {

			err = readBuf.ReadInt8(&st.TxsRoot[i1], 0, false)
			if err != nil {
				return err
			}

		}
	} else if ty == codec.SimpleList {

		_, err = readBuf.SkipTo(codec.BYTE, 0, true)
		if err != nil {
			return err
		}

		err = readBuf.ReadInt32(&length, 0, true)
		if err != nil {
			return err
		}

		err = readBuf.ReadSliceInt8(&st.TxsRoot, length, true)
		if err != nil {
			return err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return err
		}

	}

	_, ty, err = readBuf.SkipToNoCheck(5, true)
	if err != nil {
		return err
	}

	if ty == codec.LIST {
		err = readBuf.ReadInt32(&length, 0, true)
		if err != nil {
			return err
		}

		st.ReceiptRoot = make([]int8, length)
		for i2, e2 := int32(0), length; i2 < e2; i2++ {

			err = readBuf.ReadInt8(&st.ReceiptRoot[i2], 0, false)
			if err != nil {
				return err
			}

		}
	} else if ty == codec.SimpleList {

		_, err = readBuf.SkipTo(codec.BYTE, 0, true)
		if err != nil {
			return err
		}

		err = readBuf.ReadInt32(&length, 0, true)
		if err != nil {
			return err
		}

		err = readBuf.ReadSliceInt8(&st.ReceiptRoot, length, true)
		if err != nil {
			return err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return err
		}

	}

	_, ty, err = readBuf.SkipToNoCheck(6, true)
	if err != nil {
		return err
	}

	if ty == codec.LIST {
		err = readBuf.ReadInt32(&length, 0, true)
		if err != nil {
			return err
		}

		st.StateRoot = make([]int8, length)
		for i3, e3 := int32(0), length; i3 < e3; i3++ {

			err = readBuf.ReadInt8(&st.StateRoot[i3], 0, false)
			if err != nil {
				return err
			}

		}
	} else if ty == codec.SimpleList {

		_, err = readBuf.SkipTo(codec.BYTE, 0, true)
		if err != nil {
			return err
		}

		err = readBuf.ReadInt32(&length, 0, true)
		if err != nil {
			return err
		}

		err = readBuf.ReadSliceInt8(&st.StateRoot, length, true)
		if err != nil {
			return err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return err
		}

	}

	err = readBuf.ReadInt64(&st.BlockNumber, 7, true)
	if err != nil {
		return err
	}

	err = readBuf.ReadString(&st.GasUsed, 8, true)
	if err != nil {
		return err
	}

	err = readBuf.ReadInt64(&st.Timestamp, 9, true)
	if err != nil {
		return err
	}

	err = readBuf.ReadInt64(&st.Sealer, 10, true)
	if err != nil {
		return err
	}

	_, ty, err = readBuf.SkipToNoCheck(11, true)
	if err != nil {
		return err
	}

	if ty == codec.LIST {
		err = readBuf.ReadInt32(&length, 0, true)
		if err != nil {
			return err
		}

		st.SealerList = make([][]int8, length)
		for i4, e4 := int32(0), length; i4 < e4; i4++ {

			have, ty, err = readBuf.SkipToNoCheck(0, false)
			if err != nil {
				return err
			}

			if have {
				if ty == codec.LIST {
					err = readBuf.ReadInt32(&length, 0, true)
					if err != nil {
						return err
					}

					st.SealerList[i4] = make([]int8, length)
					for i5, e5 := int32(0), length; i5 < e5; i5++ {

						err = readBuf.ReadInt8(&st.SealerList[i4][i5], 0, false)
						if err != nil {
							return err
						}

					}
				} else if ty == codec.SimpleList {

					_, err = readBuf.SkipTo(codec.BYTE, 0, true)
					if err != nil {
						return err
					}

					err = readBuf.ReadInt32(&length, 0, true)
					if err != nil {
						return err
					}

					err = readBuf.ReadSliceInt8(&st.SealerList[i4], length, true)
					if err != nil {
						return err
					}

				} else {
					err = fmt.Errorf("require vector, but not")
					if err != nil {
						return err
					}

				}
			}
		}
	} else if ty == codec.SimpleList {
		err = fmt.Errorf("not support SimpleList type")
		if err != nil {
			return err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return err
		}

	}

	_, ty, err = readBuf.SkipToNoCheck(12, true)
	if err != nil {
		return err
	}

	if ty == codec.LIST {
		err = readBuf.ReadInt32(&length, 0, true)
		if err != nil {
			return err
		}

		st.ExtraData = make([]int8, length)
		for i6, e6 := int32(0), length; i6 < e6; i6++ {

			err = readBuf.ReadInt8(&st.ExtraData[i6], 0, false)
			if err != nil {
				return err
			}

		}
	} else if ty == codec.SimpleList {

		_, err = readBuf.SkipTo(codec.BYTE, 0, true)
		if err != nil {
			return err
		}

		err = readBuf.ReadInt32(&length, 0, true)
		if err != nil {
			return err
		}

		err = readBuf.ReadSliceInt8(&st.ExtraData, length, true)
		if err != nil {
			return err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return err
		}

	}

	_, ty, err = readBuf.SkipToNoCheck(13, true)
	if err != nil {
		return err
	}

	if ty == codec.LIST {
		err = readBuf.ReadInt32(&length, 0, true)
		if err != nil {
			return err
		}

		st.ConsensusWeights = make([]int64, length)
		for i7, e7 := int32(0), length; i7 < e7; i7++ {

			err = readBuf.ReadInt64(&st.ConsensusWeights[i7], 0, false)
			if err != nil {
				return err
			}

		}
	} else if ty == codec.SimpleList {
		err = fmt.Errorf("not support SimpleList type")
		if err != nil {
			return err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return err
		}

	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

// ReadBlock reads struct from the given tag , require or optional.
func (st *BlockHeaderData) ReadBlock(readBuf *codec.Reader, tag byte, require bool) error {
	var (
		err  error
		have bool
	)
	st.ResetDefault()

	have, err = readBuf.SkipTo(codec.StructBegin, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require BlockHeaderData, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(readBuf)
	if err != nil {
		return err
	}

	err = readBuf.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

// WriteTo encode struct to buffer
func (st *BlockHeaderData) WriteTo(buf *codec.Buffer) (err error) {

	err = buf.WriteInt32(st.Version, 2)
	if err != nil {
		return err
	}

	err = buf.WriteHead(codec.LIST, 3)
	if err != nil {
		return err
	}

	err = buf.WriteInt32(int32(len(st.ParentInfo)), 0)
	if err != nil {
		return err
	}

	for _, v := range st.ParentInfo {

		err = v.WriteBlock(buf, 0)
		if err != nil {
			return err
		}

	}

	err = buf.WriteHead(codec.SimpleList, 4)
	if err != nil {
		return err
	}

	err = buf.WriteHead(codec.BYTE, 0)
	if err != nil {
		return err
	}

	err = buf.WriteInt32(int32(len(st.TxsRoot)), 0)
	if err != nil {
		return err
	}

	err = buf.WriteSliceInt8(st.TxsRoot)
	if err != nil {
		return err
	}

	err = buf.WriteHead(codec.SimpleList, 5)
	if err != nil {
		return err
	}

	err = buf.WriteHead(codec.BYTE, 0)
	if err != nil {
		return err
	}

	err = buf.WriteInt32(int32(len(st.ReceiptRoot)), 0)
	if err != nil {
		return err
	}

	err = buf.WriteSliceInt8(st.ReceiptRoot)
	if err != nil {
		return err
	}

	err = buf.WriteHead(codec.SimpleList, 6)
	if err != nil {
		return err
	}

	err = buf.WriteHead(codec.BYTE, 0)
	if err != nil {
		return err
	}

	err = buf.WriteInt32(int32(len(st.StateRoot)), 0)
	if err != nil {
		return err
	}

	err = buf.WriteSliceInt8(st.StateRoot)
	if err != nil {
		return err
	}

	err = buf.WriteInt64(st.BlockNumber, 7)
	if err != nil {
		return err
	}

	err = buf.WriteString(st.GasUsed, 8)
	if err != nil {
		return err
	}

	err = buf.WriteInt64(st.Timestamp, 9)
	if err != nil {
		return err
	}

	err = buf.WriteInt64(st.Sealer, 10)
	if err != nil {
		return err
	}

	err = buf.WriteHead(codec.LIST, 11)
	if err != nil {
		return err
	}

	err = buf.WriteInt32(int32(len(st.SealerList)), 0)
	if err != nil {
		return err
	}

	for _, v := range st.SealerList {

		err = buf.WriteHead(codec.SimpleList, 0)
		if err != nil {
			return err
		}

		err = buf.WriteHead(codec.BYTE, 0)
		if err != nil {
			return err
		}

		err = buf.WriteInt32(int32(len(v)), 0)
		if err != nil {
			return err
		}

		err = buf.WriteSliceInt8(v)
		if err != nil {
			return err
		}

	}

	err = buf.WriteHead(codec.SimpleList, 12)
	if err != nil {
		return err
	}

	err = buf.WriteHead(codec.BYTE, 0)
	if err != nil {
		return err
	}

	err = buf.WriteInt32(int32(len(st.ExtraData)), 0)
	if err != nil {
		return err
	}

	err = buf.WriteSliceInt8(st.ExtraData)
	if err != nil {
		return err
	}

	err = buf.WriteHead(codec.LIST, 13)
	if err != nil {
		return err
	}

	err = buf.WriteInt32(int32(len(st.ConsensusWeights)), 0)
	if err != nil {
		return err
	}

	for _, v := range st.ConsensusWeights {

		err = buf.WriteInt64(v, 0)
		if err != nil {
			return err
		}

	}

	return err
}

// WriteBlock encode struct
func (st *BlockHeaderData) WriteBlock(buf *codec.Buffer, tag byte) error {
	var err error
	err = buf.WriteHead(codec.StructBegin, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(buf)
	if err != nil {
		return err
	}

	err = buf.WriteHead(codec.StructEnd, 0)
	if err != nil {
		return err
	}
	return nil
}

// BlockHeader struct implement
type BlockHeader struct {
	Data          BlockHeaderData `json:"data"`
	DataHash      []int8          `json:"dataHash"`
	SignatureList []Signature     `json:"signatureList"`
}

func (st *BlockHeader) ResetDefault() {
	st.Data.ResetDefault()
}

// ReadFrom reads  from readBuf and put into struct.
func (st *BlockHeader) ReadFrom(readBuf *codec.Reader) error {
	var (
		err    error
		length int32
		have   bool
		ty     byte
	)
	st.ResetDefault()

	err = st.Data.ReadBlock(readBuf, 1, false)
	if err != nil {
		return err
	}

	have, ty, err = readBuf.SkipToNoCheck(2, false)
	if err != nil {
		return err
	}

	if have {
		if ty == codec.LIST {
			err = readBuf.ReadInt32(&length, 0, true)
			if err != nil {
				return err
			}

			st.DataHash = make([]int8, length)
			for i0, e0 := int32(0), length; i0 < e0; i0++ {

				err = readBuf.ReadInt8(&st.DataHash[i0], 0, false)
				if err != nil {
					return err
				}

			}
		} else if ty == codec.SimpleList {

			_, err = readBuf.SkipTo(codec.BYTE, 0, true)
			if err != nil {
				return err
			}

			err = readBuf.ReadInt32(&length, 0, true)
			if err != nil {
				return err
			}

			err = readBuf.ReadSliceInt8(&st.DataHash, length, true)
			if err != nil {
				return err
			}

		} else {
			err = fmt.Errorf("require vector, but not")
			if err != nil {
				return err
			}

		}
	}

	have, ty, err = readBuf.SkipToNoCheck(3, false)
	if err != nil {
		return err
	}

	if have {
		if ty == codec.LIST {
			err = readBuf.ReadInt32(&length, 0, true)
			if err != nil {
				return err
			}

			st.SignatureList = make([]Signature, length)
			for i1, e1 := int32(0), length; i1 < e1; i1++ {

				err = st.SignatureList[i1].ReadBlock(readBuf, 0, false)
				if err != nil {
					return err
				}

			}
		} else if ty == codec.SimpleList {
			err = fmt.Errorf("not support SimpleList type")
			if err != nil {
				return err
			}

		} else {
			err = fmt.Errorf("require vector, but not")
			if err != nil {
				return err
			}

		}
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

// ReadBlock reads struct from the given tag , require or optional.
func (st *BlockHeader) ReadBlock(readBuf *codec.Reader, tag byte, require bool) error {
	var (
		err  error
		have bool
	)
	st.ResetDefault()

	have, err = readBuf.SkipTo(codec.StructBegin, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require BlockHeader, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(readBuf)
	if err != nil {
		return err
	}

	err = readBuf.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

// WriteTo encode struct to buffer
func (st *BlockHeader) WriteTo(buf *codec.Buffer) (err error) {

	err = st.Data.WriteBlock(buf, 1)
	if err != nil {
		return err
	}

	err = buf.WriteHead(codec.SimpleList, 2)
	if err != nil {
		return err
	}

	err = buf.WriteHead(codec.BYTE, 0)
	if err != nil {
		return err
	}

	err = buf.WriteInt32(int32(len(st.DataHash)), 0)
	if err != nil {
		return err
	}

	err = buf.WriteSliceInt8(st.DataHash)
	if err != nil {
		return err
	}

	err = buf.WriteHead(codec.LIST, 3)
	if err != nil {
		return err
	}

	err = buf.WriteInt32(int32(len(st.SignatureList)), 0)
	if err != nil {
		return err
	}

	for _, v := range st.SignatureList {

		err = v.WriteBlock(buf, 0)
		if err != nil {
			return err
		}

	}

	return err
}

// WriteBlock encode struct
func (st *BlockHeader) WriteBlock(buf *codec.Buffer, tag byte) error {
	var err error
	err = buf.WriteHead(codec.StructBegin, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(buf)
	if err != nil {
		return err
	}

	err = buf.WriteHead(codec.StructEnd, 0)
	if err != nil {
		return err
	}
	return nil
}

// Block struct implement
type Block struct {
	Version              int32                 `json:"version"`
	Type                 int32                 `json:"type"`
	BlockHeader          BlockHeader           `json:"blockHeader"`
	Transactions         []Transaction         `json:"transactions"`
	Receipts             []TransactionReceipt  `json:"receipts"`
	TransactionsMetaData []TransactionMetaData `json:"transactionsMetaData"`
	ReceiptsHash         [][]int8              `json:"receiptsHash"`
	NonceList            []string              `json:"nonceList"`
}

func (st *Block) ResetDefault() {
	st.BlockHeader.ResetDefault()
}

// ReadFrom reads  from readBuf and put into struct.
func (st *Block) ReadFrom(readBuf *codec.Reader) error {
	var (
		err    error
		length int32
		have   bool
		ty     byte
	)
	st.ResetDefault()

	err = readBuf.ReadInt32(&st.Version, 1, false)
	if err != nil {
		return err
	}

	err = readBuf.ReadInt32(&st.Type, 2, false)
	if err != nil {
		return err
	}

	err = st.BlockHeader.ReadBlock(readBuf, 3, false)
	if err != nil {
		return err
	}

	have, ty, err = readBuf.SkipToNoCheck(4, false)
	if err != nil {
		return err
	}

	if have {
		if ty == codec.LIST {
			err = readBuf.ReadInt32(&length, 0, true)
			if err != nil {
				return err
			}

			st.Transactions = make([]Transaction, length)
			for i0, e0 := int32(0), length; i0 < e0; i0++ {

				err = st.Transactions[i0].ReadBlock(readBuf, 0, false)
				if err != nil {
					return err
				}

			}
		} else if ty == codec.SimpleList {
			err = fmt.Errorf("not support SimpleList type")
			if err != nil {
				return err
			}

		} else {
			err = fmt.Errorf("require vector, but not")
			if err != nil {
				return err
			}

		}
	}

	have, ty, err = readBuf.SkipToNoCheck(5, false)
	if err != nil {
		return err
	}

	if have {
		if ty == codec.LIST {
			err = readBuf.ReadInt32(&length, 0, true)
			if err != nil {
				return err
			}

			st.Receipts = make([]TransactionReceipt, length)
			for i1, e1 := int32(0), length; i1 < e1; i1++ {

				err = st.Receipts[i1].ReadBlock(readBuf, 0, false)
				if err != nil {
					return err
				}

			}
		} else if ty == codec.SimpleList {
			err = fmt.Errorf("not support SimpleList type")
			if err != nil {
				return err
			}

		} else {
			err = fmt.Errorf("require vector, but not")
			if err != nil {
				return err
			}

		}
	}

	have, ty, err = readBuf.SkipToNoCheck(6, false)
	if err != nil {
		return err
	}

	if have {
		if ty == codec.LIST {
			err = readBuf.ReadInt32(&length, 0, true)
			if err != nil {
				return err
			}

			st.TransactionsMetaData = make([]TransactionMetaData, length)
			for i2, e2 := int32(0), length; i2 < e2; i2++ {

				err = st.TransactionsMetaData[i2].ReadBlock(readBuf, 0, false)
				if err != nil {
					return err
				}

			}
		} else if ty == codec.SimpleList {
			err = fmt.Errorf("not support SimpleList type")
			if err != nil {
				return err
			}

		} else {
			err = fmt.Errorf("require vector, but not")
			if err != nil {
				return err
			}

		}
	}

	have, ty, err = readBuf.SkipToNoCheck(7, false)
	if err != nil {
		return err
	}

	if have {
		if ty == codec.LIST {
			err = readBuf.ReadInt32(&length, 0, true)
			if err != nil {
				return err
			}

			st.ReceiptsHash = make([][]int8, length)
			for i3, e3 := int32(0), length; i3 < e3; i3++ {

				have, ty, err = readBuf.SkipToNoCheck(0, false)
				if err != nil {
					return err
				}

				if have {
					if ty == codec.LIST {
						err = readBuf.ReadInt32(&length, 0, true)
						if err != nil {
							return err
						}

						st.ReceiptsHash[i3] = make([]int8, length)
						for i4, e4 := int32(0), length; i4 < e4; i4++ {

							err = readBuf.ReadInt8(&st.ReceiptsHash[i3][i4], 0, false)
							if err != nil {
								return err
							}

						}
					} else if ty == codec.SimpleList {

						_, err = readBuf.SkipTo(codec.BYTE, 0, true)
						if err != nil {
							return err
						}

						err = readBuf.ReadInt32(&length, 0, true)
						if err != nil {
							return err
						}

						err = readBuf.ReadSliceInt8(&st.ReceiptsHash[i3], length, true)
						if err != nil {
							return err
						}

					} else {
						err = fmt.Errorf("require vector, but not")
						if err != nil {
							return err
						}

					}
				}
			}
		} else if ty == codec.SimpleList {
			err = fmt.Errorf("not support SimpleList type")
			if err != nil {
				return err
			}

		} else {
			err = fmt.Errorf("require vector, but not")
			if err != nil {
				return err
			}

		}
	}

	have, ty, err = readBuf.SkipToNoCheck(8, false)
	if err != nil {
		return err
	}

	if have {
		if ty == codec.LIST {
			err = readBuf.ReadInt32(&length, 0, true)
			if err != nil {
				return err
			}

			st.NonceList = make([]string, length)
			for i5, e5 := int32(0), length; i5 < e5; i5++ {

				err = readBuf.ReadString(&st.NonceList[i5], 0, false)
				if err != nil {
					return err
				}

			}
		} else if ty == codec.SimpleList {
			err = fmt.Errorf("not support SimpleList type")
			if err != nil {
				return err
			}

		} else {
			err = fmt.Errorf("require vector, but not")
			if err != nil {
				return err
			}

		}
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

// ReadBlock reads struct from the given tag , require or optional.
func (st *Block) ReadBlock(readBuf *codec.Reader, tag byte, require bool) error {
	var (
		err  error
		have bool
	)
	st.ResetDefault()

	have, err = readBuf.SkipTo(codec.StructBegin, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require Block, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(readBuf)
	if err != nil {
		return err
	}

	err = readBuf.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

// WriteTo encode struct to buffer
func (st *Block) WriteTo(buf *codec.Buffer) (err error) {

	err = buf.WriteInt32(st.Version, 1)
	if err != nil {
		return err
	}

	err = buf.WriteInt32(st.Type, 2)
	if err != nil {
		return err
	}

	err = st.BlockHeader.WriteBlock(buf, 3)
	if err != nil {
		return err
	}

	err = buf.WriteHead(codec.LIST, 4)
	if err != nil {
		return err
	}

	err = buf.WriteInt32(int32(len(st.Transactions)), 0)
	if err != nil {
		return err
	}

	for _, v := range st.Transactions {

		err = v.WriteBlock(buf, 0)
		if err != nil {
			return err
		}

	}

	err = buf.WriteHead(codec.LIST, 5)
	if err != nil {
		return err
	}

	err = buf.WriteInt32(int32(len(st.Receipts)), 0)
	if err != nil {
		return err
	}

	for _, v := range st.Receipts {

		err = v.WriteBlock(buf, 0)
		if err != nil {
			return err
		}

	}

	err = buf.WriteHead(codec.LIST, 6)
	if err != nil {
		return err
	}

	err = buf.WriteInt32(int32(len(st.TransactionsMetaData)), 0)
	if err != nil {
		return err
	}

	for _, v := range st.TransactionsMetaData {

		err = v.WriteBlock(buf, 0)
		if err != nil {
			return err
		}

	}

	err = buf.WriteHead(codec.LIST, 7)
	if err != nil {
		return err
	}

	err = buf.WriteInt32(int32(len(st.ReceiptsHash)), 0)
	if err != nil {
		return err
	}

	for _, v := range st.ReceiptsHash {

		err = buf.WriteHead(codec.SimpleList, 0)
		if err != nil {
			return err
		}

		err = buf.WriteHead(codec.BYTE, 0)
		if err != nil {
			return err
		}

		err = buf.WriteInt32(int32(len(v)), 0)
		if err != nil {
			return err
		}

		err = buf.WriteSliceInt8(v)
		if err != nil {
			return err
		}

	}

	err = buf.WriteHead(codec.LIST, 8)
	if err != nil {
		return err
	}

	err = buf.WriteInt32(int32(len(st.NonceList)), 0)
	if err != nil {
		return err
	}

	for _, v := range st.NonceList {

		err = buf.WriteString(v, 0)
		if err != nil {
			return err
		}

	}

	return err
}

// WriteBlock encode struct
func (st *Block) WriteBlock(buf *codec.Buffer, tag byte) error {
	var err error
	err = buf.WriteHead(codec.StructBegin, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(buf)
	if err != nil {
		return err
	}

	err = buf.WriteHead(codec.StructEnd, 0)
	if err != nil {
		return err
	}
	return nil
}
